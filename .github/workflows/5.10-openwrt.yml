name: Build 5.10-OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
  schedule:
    - cron: 0 19 * * *
  watch:
    types: [started]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 5.10.config
  DIY_P1_SH: 5.10-part1.sh
  DIY_P2_SH: 5.10-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 检查项目分支
        uses: actions/checkout@v4

      - name: 安装编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo apt update
          sudo apt -y purge azure-cli* docker* ghc* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* snap*
          sudo apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang \
                              cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git \
                              gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
                              libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
                              libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools \
                              python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim \
                              wget xmlto xxd zlib1g-dev
          sudo apt clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir

      - name: 下载固件源码
        working-directory: /workdir
        run: |
          df -hT
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 清理旧的构建目录
        run: rm -rf openwrt/{staging_dir,build_dir,tmp}

      - name: 加载自定义设置
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt && $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 下载和安装插件
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 更改设置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt && $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: SSH链接管理
        if: inputs.ssh == 'true'
        uses: P3TERX/ssh2actions@v1.0.0
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: 下载安装包
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -delete

      - name: 获取内核版本号
        run: echo "KERNEL_VERSION_5_10=$(grep 'LINUX_VERSION-5.10' openwrt/include/kernel-5.10 | cut -d' ' -f3)" >> $GITHUB_ENV

      - name: 开始编译固件
        run: |
          cd openwrt
          make -j$(nproc) V=s || make -j1 V=s
          echo "DEVICE_NAME=_$(sed -rn 's/.*DEVICE_(.*)=y/\1/p' .config)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 查看磁盘使用情况
        run: df -hT && free -m

      - name: 上传bin压缩目录
        uses: actions/upload-artifact@v4
        if: env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: 整理编译好的固件
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: 上传固件到 GitHub
        uses: actions/upload-artifact@v4
        if: env.UPLOAD_FIRMWARE == 'true'
        with:
          name: OpenWrt-5.10${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 创建 Release 标签
        run: |
          echo "RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "Built on ${{ env.FILE_DATE }}" > release.txt

      - name: 发布至 Release
        uses: softprops/action-gh-release@v1
        if: env.UPLOAD_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: OpenWrt 5.10${{ env.KERNEL_VERSION_5_10 }}-X86-64_${{ env.FILE_DATE }}
          tag_name: ${{ env.RELEASE_TAG }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: 清理工作流运行
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: 删除旧的 Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true'
        with:
          keep_latest: 30
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build 6.12-OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
  schedule:
    - cron: 0 19 * * *  # 每天 UTC 19:00 触发
  push:
    branches:
      - main

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 6.12.config
  DIY_P1_SH: 6.12-part1.sh
  DIY_P2_SH: 6.12-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: 清理 Docker 镜像和不必要的软件包
        run: |
          docker rmi `docker images -q` || true
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool libtool-bin llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev > apt_install.log 2>&1
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 上传 APT 安装日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Apt-Install-Log
          path: apt_install.log

      - name: 下载固件源码
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 加载自定义配置
        run: |
          cd openwrt
          [ -e ../$CONFIG_FILE ] && mv ../$CONFIG_FILE .config
          [ -e ../$DIY_P1_SH ] && chmod +x ../$DIY_P1_SH && ../$DIY_P1_SH
          make defconfig

      - name: 获取内核版本
        run: |
          cd openwrt
          KERNEL_VERSION=$(grep 'LINUX_VERSION-6.12' include/kernel-6.12 | cut -d' ' -f3)
          echo "KERNEL_VERSION_6_12=${KERNEL_VERSION}" >> $GITHUB_ENV

      - name: 更新工具链并编译固件
        id: compile
        run: |
          set -e
          cd openwrt
          echo "检查磁盘空间和内存："
          df -hT
          free -m
          sudo -E apt -y install libtool libtool-bin
          make download -j8 V=s || { echo "下载失败，请检查网络或源"; exit 1; }
          echo "开始清理工具链..."
          make tools/clean -j1 V=s 2>&1 | tee tools.log || { echo "工具清理失败，请检查 tools.log"; exit 1; }
          make toolchain/install -j$(nproc) V=s 2>&1 | tee -a tools.log || { echo "工具链安装失败"; exit 1; }
          echo -e "$(nproc) 线程编译固件"
          make -j$(nproc) V=s 2>&1 | tee build.log || { echo "多线程编译失败，尝试单线程编译..."; make -j1 V=s 2>&1 | tee -a build.log; }
          if [ $? -ne 0 ]; then
            echo "编译失败，上传日志供调试..."
            echo "status=failure" >> $GITHUB_ENV
            exit 1
          else
            echo "status=success" >> $GITHUB_ENV
          fi

      - name: 上传编译日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Build-Logs
          path: |
            openwrt/tools.log
            openwrt/build.log

      - name: 组织固件文件
        if: env.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "当前目录内容："
          ls -lh
          if [ -z "$(ls *.bin *.img 2>/dev/null)" ]; then
            echo "错误：未找到固件文件 (*.bin 或 *.img)"
            exit 1
          fi
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: 上传固件到 Artifacts
        if: env.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-6.12
          path: ${{ env.FIRMWARE }}/*.bin

      - name: 生成 Release 信息
        if: env.status == 'success'
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          touch release.txt
          echo "Built on $(date)" >> release.txt

      - name: 发布 Release
        if: env.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: OpenWrt 6.12${{ env.KERNEL_VERSION_6_12 }}-X86-64
          tag_name: ${{ env.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 删除旧的 Releases
        if: env.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 30
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}